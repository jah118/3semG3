@model RestaurantWebApp.DataTransferObject.ReservationDTO

@{
    ViewBag.Title = "Reservation";
}
<h2>Bordbestilling</h2>
<hr />

@section Styles {
    @Styles.Render("~/Content/createView")
    <link rel="stylesheet" href="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.css">
    <link href="https://ajax.aspnetcdn.com/ajax/jquery.ui/1.10.4/themes/flick/jquery-ui.css" rel="stylesheet" type="text/css">
}

<div class="container">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()
        <div class="row">
            <div class="col">
                <div class="form-group">
                    @Html.LabelFor(model => model.ReservationTime, new {@class = "control-label col-md-5"})
                    <div class="col-md-10">
                        @Html.TextBoxFor(model => model.ReservationTime, new {@class = "form-control"})
                        @*@Html.ValidationMessageFor(model => model.ReservationTime, "", new { @class = "text-danger" })*@
                        <input class="timepicker form-control" id="timepicker" name="timepicker" autocomplete="false"/>
                        <input type="hidden" id="ReservationTimeHid" name="ReservationTimeHid"/>
                        <input type="hidden" id="ReservationTimeHid2" name="ReservationTimeHid2"/>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.NoOfPeople, new {@class = "control-label col-md-5"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.NoOfPeople, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.NoOfPeople, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Tables, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        <select name="Tables" id="Tables2" class="form-control" multiple>
                            @if (Model.Tables != null)
                            {
                                foreach (var x in Model.Tables)
                                {
                                    <option value="@x.Id">Bord: @x.TableNumber </option>
                                }
                            }
                        </select>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Deposit, "Depositum", new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.EditorFor(model => model.Deposit)
                            @Html.ValidationMessageFor(model => model.Deposit, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Note, new {@class = "control-label col-md-5"})
                    <div class="col-md-10">
                        @Html.TextAreaFor(model => model.Note, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Note, "", new {@class = "text-danger"})
                    </div>

                    @Html.LabelFor(model => model.OrderingFood, "Vil du bestille mad med til din reservation?", new {@class = "control-label col-md-5"})
                    <div class="col-md-10">
                        <div class="checkbox">
                            @Html.CheckBoxFor(model => model.OrderingFood, new {@class = "form-control", id = "check", onclick = "myFunction()"})
                            <p id="checkText" style="display: none">Der er valgt der skal bestilles mad</p>
                            @Html.ValidationMessageFor(model => model.OrderingFood, "", new {@class = "text-danger"})
                        </div>
                    </div>
                </div>
            </div>

            <div class="col">
                @Html.ValidationSummary(true, "", new {@class = "text-danger"})
                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Phone, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.Phone, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.Phone, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Email, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.Email, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.Email, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.FirstName, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.FirstName, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.FirstName, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.LastName, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.LastName, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.LastName, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.Address, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.Address, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.Address, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.ZipCode, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.ZipCode, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.ZipCode, "", new {@class = "text-danger"})
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.Customer.City, new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.Customer.City, new {htmlAttributes = new {@class = "form-control"}})
                        @Html.ValidationMessageFor(model => model.Customer.City, "", new {@class = "text-danger"})
                    </div>
                </div>
            </div>
        </div>
        <div class="w-100"></div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Gem og afslut" class="btn btn-primary"/>
            </div>
        </div>

        <div>
            @Html.ValidationSummary()
        </div>
    }
</div>

<div>
    @Html.ActionLink("Gå til forside", "Index")
</div>

@section Scripts {
    @*//TODO for dette virker skal valdiation slået fra , der en fejl i opsetning der gør man ikke kan komme vidre fordi den mener dette ikke er en vaild date i reservation time.*@
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/jqueryui")
    <script src="//cdnjs.cloudflare.com/ajax/libs/timepicker/1.3.5/jquery.timepicker.min.js"></script>

    <script>
        //setup for timepicker and uses its change event to
        $(document).ready(function () {
            $('input.timepicker').timepicker({
                timeFormat: 'HH:mm',
                interval: 15,
                minTime: '12',
                maxTime: '11:00pm',
                dynamic: false,
                dropdown: true,
                scrollbar: true,
                change: function () {
                    $('#Tables2').empty();
                    const time1 = document.getElementById("timepicker").value;
                    const date = document.getElementById("ReservationTime").value;
                    console.log(date);
                    //var datetime = date + " " + time1;
                    const date2 = date.replaceAll("/", "-");
                    const dateTimeFormated = date2 + ' ' + time1 + ':00';
                    getTablesByDateTime(dateTimeFormated);
                    updatePostReservationTime(dateTimeFormated);
                    updatePostReservationTime2(dateTimeFormated);
                }
            });
        });

        //sets up  datepicker and clears table and time each time a new date is selected
        $(document).ready(function () {
            $("#ReservationTime").val("klik for at vælge tidspunkt");
            $("#ReservationTime").datepicker({
                autoHide: true,
                autoPick: true,
                dateFormat: "yy/mm/dd",
                language: '',
                maxDate: '+3m +15d',
                minDate: 0,
                onSelect: function (dateText) {
                    $('#Tables2').empty();
                    $("#timepicker").val("klik for at vælge tidspunkt");
                }
            });
        });

        function updatePostReservationTime(val) {
            document.getElementById('ReservationTimeHid').value = val;
        }

        function updatePostReservationTime2(val) {
            document.getElementById('ReservationTimeHid2').value = val;
        }

        //ask the api for tables.
        function getTablesByDateTime(datetime) {
            const url = `https://localhost:44386/api/Table/OpenTables/${datetime}`;
            const get = $.getJSON(url,
                function (data) {
                    console.log(typeof data);
                });
            get.done(function (data) {
                console.log(typeof data);
                ChangeTablesList(data);
                //console.log(JSON.stringify(obj));
            });
        }

        //sets tables from json array objects as option tag for each object
        function ChangeTablesList(tables) {
            for (let key in tables) {
                const option = tables[key];
                const newOption = $('<option />');
                newOption.val(option.id);
                newOption.text(option.tableNumber);
                $('#Tables2').append(newOption);
            }
        }

        function myFunction() {
            // Get the checkbox
            const checkBox = document.getElementById("check");
            // Get the output text
            const text = document.getElementById("checkText");

            // If the checkbox is checked, display the output text
            if (checkBox.checked) {
                text.style.display = "block";
            } else {
                text.style.display = "none";
            }
        }
    </script>
}